
learn-in-depth-cortex.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <_S_Text>:
 8000000:	2000100c 	.word	0x2000100c
 8000004:	080000fc 	.word	0x080000fc
 8000008:	080000fd 	.word	0x080000fd
 800000c:	080000fd 	.word	0x080000fd
 8000010:	080000fd 	.word	0x080000fd
 8000014:	080000fd 	.word	0x080000fd
 8000018:	080000fd 	.word	0x080000fd
 800001c:	0800016c 	.word	0x0800016c
 8000020:	0800016c 	.word	0x0800016c
 8000024:	0800016c 	.word	0x0800016c
 8000028:	0800016c 	.word	0x0800016c
 800002c:	080000fd 	.word	0x080000fd
 8000030:	0800016c 	.word	0x0800016c
 8000034:	0800016c 	.word	0x0800016c
 8000038:	080000fd 	.word	0x080000fd
 800003c:	080000fd 	.word	0x080000fd
 8000040:	080000fd 	.word	0x080000fd
 8000044:	080000fd 	.word	0x080000fd
 8000048:	080000fd 	.word	0x080000fd

0800004c <main>:
#include "stm32f103c.h"
volatile Registers *GPIOAODR = (volatile Registers *)GPIO_Port_A_ODR;
volatile Registers *GPIOACRH = (volatile Registers *)GPIO_Port_A_CRH;
volatile Registers *RCCAPB = (volatile Registers *)RCC_APB2ENR;
int main(void)
{
 800004c:	b480      	push	{r7}
 800004e:	b083      	sub	sp, #12
 8000050:	af00      	add	r7, sp, #0
	RCCAPB->pins.pin2 = 1;
 8000052:	4b27      	ldr	r3, [pc, #156]	; (80000f0 <main+0xa4>)
 8000054:	681a      	ldr	r2, [r3, #0]
 8000056:	6813      	ldr	r3, [r2, #0]
 8000058:	f043 0304 	orr.w	r3, r3, #4
 800005c:	6013      	str	r3, [r2, #0]
	GPIOACRH->pins.pin19 = 0;
 800005e:	4b25      	ldr	r3, [pc, #148]	; (80000f4 <main+0xa8>)
 8000060:	681a      	ldr	r2, [r3, #0]
 8000062:	6813      	ldr	r3, [r2, #0]
 8000064:	f36f 43d3 	bfc	r3, #19, #1
 8000068:	6013      	str	r3, [r2, #0]
	GPIOACRH->pins.pin20 = 1;
 800006a:	4b22      	ldr	r3, [pc, #136]	; (80000f4 <main+0xa8>)
 800006c:	681a      	ldr	r2, [r3, #0]
 800006e:	6813      	ldr	r3, [r2, #0]
 8000070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000074:	6013      	str	r3, [r2, #0]
	GPIOACRH->pins.pin21 = 0;
 8000076:	4b1f      	ldr	r3, [pc, #124]	; (80000f4 <main+0xa8>)
 8000078:	681a      	ldr	r2, [r3, #0]
 800007a:	6813      	ldr	r3, [r2, #0]
 800007c:	f36f 5355 	bfc	r3, #21, #1
 8000080:	6013      	str	r3, [r2, #0]
	GPIOACRH->pins.pin22 = 0;
 8000082:	4b1c      	ldr	r3, [pc, #112]	; (80000f4 <main+0xa8>)
 8000084:	681a      	ldr	r2, [r3, #0]
 8000086:	6813      	ldr	r3, [r2, #0]
 8000088:	f36f 5396 	bfc	r3, #22, #1
 800008c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		int i = 0;
 800008e:	2300      	movs	r3, #0
 8000090:	607b      	str	r3, [r7, #4]
		for (i = 0; i < 5000; i++)
 8000092:	2300      	movs	r3, #0
 8000094:	607b      	str	r3, [r7, #4]
 8000096:	e002      	b.n	800009e <main+0x52>
 8000098:	687b      	ldr	r3, [r7, #4]
 800009a:	3301      	adds	r3, #1
 800009c:	607b      	str	r3, [r7, #4]
 800009e:	687b      	ldr	r3, [r7, #4]
 80000a0:	f241 3287 	movw	r2, #4999	; 0x1387
 80000a4:	4293      	cmp	r3, r2
 80000a6:	ddf7      	ble.n	8000098 <main+0x4c>
			;
		GPIOAODR->pins.pin13 = 1;
 80000a8:	4b13      	ldr	r3, [pc, #76]	; (80000f8 <main+0xac>)
 80000aa:	681a      	ldr	r2, [r3, #0]
 80000ac:	6813      	ldr	r3, [r2, #0]
 80000ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80000b2:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 5000; i++)
 80000b4:	2300      	movs	r3, #0
 80000b6:	607b      	str	r3, [r7, #4]
 80000b8:	e002      	b.n	80000c0 <main+0x74>
 80000ba:	687b      	ldr	r3, [r7, #4]
 80000bc:	3301      	adds	r3, #1
 80000be:	607b      	str	r3, [r7, #4]
 80000c0:	687b      	ldr	r3, [r7, #4]
 80000c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80000c6:	4293      	cmp	r3, r2
 80000c8:	ddf7      	ble.n	80000ba <main+0x6e>
			;
		GPIOAODR->pins.pin13 = 0;
 80000ca:	4b0b      	ldr	r3, [pc, #44]	; (80000f8 <main+0xac>)
 80000cc:	681a      	ldr	r2, [r3, #0]
 80000ce:	6813      	ldr	r3, [r2, #0]
 80000d0:	f36f 334d 	bfc	r3, #13, #1
 80000d4:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 5000; i++)
 80000d6:	2300      	movs	r3, #0
 80000d8:	607b      	str	r3, [r7, #4]
 80000da:	e002      	b.n	80000e2 <main+0x96>
 80000dc:	687b      	ldr	r3, [r7, #4]
 80000de:	3301      	adds	r3, #1
 80000e0:	607b      	str	r3, [r7, #4]
 80000e2:	687b      	ldr	r3, [r7, #4]
 80000e4:	f241 3287 	movw	r2, #4999	; 0x1387
 80000e8:	4293      	cmp	r3, r2
 80000ea:	ddf7      	ble.n	80000dc <main+0x90>
	{
 80000ec:	e7cf      	b.n	800008e <main+0x42>
 80000ee:	bf00      	nop
 80000f0:	20000008 	.word	0x20000008
 80000f4:	20000004 	.word	0x20000004
 80000f8:	20000000 	.word	0x20000000

080000fc <Bus_Fault>:
 80000fc:	e59f0048 	ldr	r0, [pc, #72]	; 800014c <LoopFillZero+0xc>
 8000100:	e59f1048 	ldr	r1, [pc, #72]	; 8000150 <LoopFillZero+0x10>
 8000104:	e59f2048 	ldr	r2, [pc, #72]	; 8000154 <LoopFillZero+0x14>
 8000108:	e3b03000 	movs	r3, #0
 800010c:	ea000002 	b	800011c <DataInit>

08000110 <CopyData>:
 8000110:	e7924003 	ldr	r4, [r2, r3]
 8000114:	e7804003 	str	r4, [r0, r3]
 8000118:	e2933004 	adds	r3, r3, #4

0800011c <DataInit>:
 800011c:	e0904003 	adds	r4, r0, r3
 8000120:	e1540001 	cmp	r4, r1
 8000124:	3afffff9 	bcc	8000110 <CopyData>
 8000128:	e59f2028 	ldr	r2, [pc, #40]	; 8000158 <LoopFillZero+0x18>
 800012c:	e59f4028 	ldr	r4, [pc, #40]	; 800015c <LoopFillZero+0x1c>
 8000130:	e3b03000 	movs	r3, #0
 8000134:	ea000001 	b	8000140 <LoopFillZero>

08000138 <FillZero>:
 8000138:	e5823000 	str	r3, [r2]
 800013c:	e2922004 	adds	r2, r2, #4

08000140 <LoopFillZero>:
 8000140:	e1520004 	cmp	r2, r4
 8000144:	3afffffb 	bcc	8000138 <FillZero>
 8000148:	faffffbf 	blx	800004c <main>
 800014c:	20000000 	.word	0x20000000
 8000150:	2000000c 	.word	0x2000000c
 8000154:	2000000c 	.word	0x2000000c
 8000158:	2000000c 	.word	0x2000000c
 800015c:	2000000c 	.word	0x2000000c
